name: Deploy Project

on:
  workflow_dispatch:
    inputs:
      RV:
        description: "Release -ver fix"
        required: true

env:
  YANDEX_CONTAINER_REGISTRY: ${{ secrets.YANDEX_CONTAINER_REGISTRY }}
  YANDEX_OAUTH_TOKEN: ${{ secrets.YANDEX_OAUTH_TOKEN }}

jobs:
  deploy:  
    name: Deploy Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Yandex Container Registry
        run: |
          echo "$YANDEX_OAUTH_TOKEN" | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex

      - name: Verify Docker image exists
        run: |
          docker pull "cr.yandex/$YANDEX_CONTAINER_REGISTRY/app:${{ inputs.RV }}_latest" || \
            { echo "Error: Docker image not found"; exit 1; }
      
      - name: Download image in VM and Deploy here
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.YANDEX_OAUTH_TOKEN }}" | sudo docker login \
              --username oauth \
              --password-stdin \
              cr.yandex

            sudo docker pull cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY }}/app:${{ github.event.inputs.RV }}_latest
            sudo docker stop app || true
            sudo docker rm app || true
            sudo docker run -d --name app -p 3000:3000 cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY }}/app:${{ github.event.inputs.RV }}_latest

      - name: Find issue
        id: find_issue
        run: |
          ISSUE_TITLE="Release V${{ inputs.RV }}"
          echo "Looking for issue with title: $ISSUE_TITLE"
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          echo "release_version=${{ inputs.RV }}" >> $GITHUB_OUTPUT

      - name: Create release comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'created',
                direction: 'desc'
              });

              const issueTitle = '${{ steps.find_issue.outputs.issue_title }}';
              const releaseVersion = '${{ steps.find_issue.outputs.release_version }}';

              const targetIssue = issues.find(issue => 
                issue.title.includes(issueTitle)
              );

              if (!targetIssue) {
                core.warning(`No matching issue found with title: ${issueTitle}`);
                return;
              }

              const commentBody = `Application on the server
              **Version**: ${LeleaseVersion}
              **Date**: ${new Date().toLocaleString('ru-RU')}
              **Author**: @${context.actor}
              **Docker image**: \`cr.yandex/${{ env.YANDEX_CONTAINER_REGISTRY }}/app:${releaseVersion}_latest\``;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: targetIssue.number,
                body: commentBody
              });
              
              core.notice(`Successfully added comment to issue #${targetIssue.number}`);
            } catch (error) {
              core.error('Failed to create comment: ' + error.message);
            }
