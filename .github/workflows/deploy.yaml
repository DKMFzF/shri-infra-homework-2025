name: Deploy Project

on:
  workflow_dispatch:
    inputs:
      RV:
        description: "–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.0)"
        required: true

env:
  YANDEX_CONTAINER_REGISTRY: ${{ secrets.YANDEX_CONTAINER_REGISTRY }}
  YANDEX_OAUTH_TOKEN: ${{ secrets.YANDEX_OAUTH_TOKEN }}

jobs:
  deploy:  
    name: Deploy Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Yandex Container Registry
        run: |
          echo "$YANDEX_OAUTH_TOKEN" | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex

      - name: Verify Docker image exists
        run: |
          docker pull "cr.yandex/$YANDEX_CONTAINER_REGISTRY/app:${{ inputs.RV }}_latest" || \
            { echo "Error: Docker image not found"; exit 1; }
      
      - name: Download image in VM and Deploy here
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.YANDEX_OAUTH_TOKEN }}" | sudo docker login \
              --username oauth \
              --password-stdin \
              cr.yandex

            sudo docker pull cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY }}/app:${{ github.event.inputs.RV }}_latest
            sudo docker stop app || true
            sudo docker rm app || true
            sudo docker run -d --name app -p 3000:3000 cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY }}/app:${{ github.event.inputs.RV }}_latest

      - name: Find related issue
        id: find_issue
        run: |
          # –ü–æ–∏—Å–∫ issue –ø–æ –≤–µ—Ä—Å–∏–∏ —Ä–µ–ª–∏–∑–∞
          echo "issue_title=–†–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ ${{ inputs.RV }}" >> $GITHUB_OUTPUT

      - name: Create release comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // –ò—â–µ–º issue, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –≤–µ—Ä—Å–∏—é —Ä–µ–ª–∏–∑–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all', // –ò—â–µ–º —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö issues
              sort: 'created',
              direction: 'desc'
            });
            
            const releaseVersion = '${{ inputs.RV }}';
            const targetIssue = issues.find(issue => 
              issue.title.includes(releaseVersion) || 
              issue.body.includes(releaseVersion)
            );

            if (!targetIssue) {
              console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ issue, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π —Ä–µ–ª–∏–∑–∞');
              return;
            }

            const commentBody = `üöÄ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω!
            
            **–í–µ—Ä—Å–∏—è**: ${releaseVersion}
            **–î–∞—Ç–∞**: ${new Date().toLocaleString()}
            **–í—ã–ø–æ–ª–Ω–∏–ª**: @${context.actor}
            **Docker –æ–±—Ä–∞–∑**: \`cr.yandex/${{ env.YANDEX_CONTAINER_REGISTRY }}/app:${releaseVersion}_latest\`
            
            –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–ª–∏–∑–æ–º! üéâ`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: targetIssue.number,
              body: commentBody
            });
