name: Create a Release

on:
  workflow_dispatch:

env:
  VERSION: ${{ github.run_number }}
  YANDEX_CONTAINER_REGISTRY: ${{ secrets.YANDEX_CONTAINER_REGISTRY }}
  YANDEX_OAUTH_TOKEN: ${{ secrets.YANDEX_OAUTH_TOKEN }}

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest 
    steps:
      - name: Uses checkout code
        uses: actions/checkout@v4

      - name: Uses setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Start download dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint


  test:
    name: Test Code
    runs-on: ubuntu-latest
    steps:
      - name: Uses checkout code
        uses: actions/checkout@v4

      - name: Uses setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Start download dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test

  release:
    name: New Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release Branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b releases/$VERSION
          git push origin releases/$VERSION

      - name: Update CHANGELOG.md
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)")
          else
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)")
          fi

          echo -e "# Version $VERSION ($(date '+%Y-%m-%d'))\n\n$COMMITS\n\n$(cat CHANGELOG.md 2>/dev/null || echo '# Changelog')" > CHANGELOG.new
          
          if ! diff CHANGELOG.md CHANGELOG.new >/dev/null 2>&1; then
            mv CHANGELOG.new CHANGELOG.md
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG.md for version $VERSION"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin releases/$VERSION
          else
            echo "No changes in CHANGELOG.md"
            rm CHANGELOG.new
          fi

      - name: Build Docker Image
        run: |
          docker build -t cr.yandex/${YANDEX_CONTAINER_REGISTRY}/app:${VERSION} .
          docker tag cr.yandex/${YANDEX_CONTAINER_REGISTRY}/app:${VERSION} cr.yandex/${YANDEX_CONTAINER_REGISTRY}/app:${VERSION}_latest

      - name: Login in Yandex Container Registry
        run: |
          echo ${YANDEX_OAUTH_TOKEN}|docker login \
            --username oauth \
            --password-stdin \
            cr.yandex

      - name: Push Docker Images
        run: |
          docker push cr.yandex/${YANDEX_CONTAINER_REGISTRY}/app:${VERSION}
          docker push cr.yandex/${YANDEX_CONTAINER_REGISTRY}/app:${VERSION}_latest

      - name: Added Version Tag
        run: |
          git tag v${VERSION}
          git push origin v${VERSION}

      - name: Create Release Issue
        uses: actions/github-script@v6
        with:
          script: |
            // дата
            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            }).catch(() => ({ data: null }));
            
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: latestRelease ? latestRelease.tag_name : 'main',
              per_page: 100
            });

            // список коммитов
            const commitList = commits.map(commit =>
              `- ${commit.commit.message.split('\n')[0]} (${commit.sha.substring(0, 7)})`
            ).join('\n');

            // заполнялка
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release V${process.env.VERSION}`,
              body: `## Release Information
              - Date: ${new Date().toISOString()}
              - Author Release: **[${context.actor}](https://github.com/${context.actor})**
              - Number version: v${process.env.VERSION}

              ## Changes since last release:

              ${commitList}


            ## Link on Docker Image:
            \`cr.yandex/${process.env.YANDEX_CONTAINER_REGISTRY}/app:${process.env.VERSION}\`

              `
            });

